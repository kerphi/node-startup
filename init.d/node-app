#!/bin/bash
###############

# REDHAT chkconfig header

# chkconfig: - 58 74
# description: node-app is the script for starting a node app on boot.
### BEGIN INIT INFO
# Provides: node
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop node
# Description: Node process for app
### END INIT INFO


# single or multiple apps 
# (yes|no)
MULTIPLE_APPS=no

# use node or forever
# (yes|no)
USE_FOREVER=no

# multiple apps
NODE_ENVS=("production" "production")
NODE_APPS=("app.js" "app.js")
NODE_PORTS=(3000 3001)
APP_DIRS=("/www/example1.com" "/www/example2.com")

# single app
NODE_ENV="production"
NODE_APP="app.js"
PORT=3000
APP_DIR="/www/example1.com";

# common
PID_DIR=$APP_DIR/pid
LOG_DIR=$APP_DIR/log
CONFIG_DIR=$APP_DIR/config

PID_FILE=$PID_DIR/app.pid
LOG_FILE=$LOG_DIR/app.log

NODE_EXEC=`which node`
FOREVER_EXEC=`which forever`

test -f /etc/default/node-app && . /etc/default/node-app

start_app (){
    if [ -f $PID_FILE ]
    then
        echo "$PID_FILE exists, process is already running or crashed"
        exit 1
    else
        echo "Starting node app ${APP_DIR}/${NODE_APP} ..."
        if [ "x$USE_FOREVER" = "xyes" ]
        then
          PORT=$PORT NODE_ENV=$NODE_ENV NODE_CONFIG_DIR=$CONFIG_DIR $FOREVER_EXEC start $APP_DIR/$NODE_APP
          PID=$!
          RESULT=$?
          
        else
          PORT=$PORT NODE_ENV=$NODE_ENV NODE_CONFIG_DIR=$CONFIG_DIR $NODE_EXEC $APP_DIR/$NODE_APP  1>$LOG_FILE 2>&1 &
          PID=$!
          RESULT=$?
          
        fi

        if [ $RESULT -eq 0 ] && [ ! -d $PID_DIR ]
        then
          echo "creating directory $PID_DIR ..."
          mkdir -p $PID_DIR
        fi
        
        if [ $RESULT -eq 0 ]
        then
          echo $PID > $PID_FILE;
        else
          echo "error runnig app $APP_DIR/$NODE_APP"
        fi
    fi
}

stop_app (){
    if [ ! -f $PID_FILE ]
    then
        echo "$PID_FILE does not exist, process is not running"
        exit 1
    else
        echo -n "Stopping $APP_DIR/$NODE_APP ..."
        if [ "x$USE_FOREVER" = "xyes" ]
        then
          PORT=$PORT NODE_ENV=$NODE_ENV NODE_CONFIG_DIR=$CONFIG_DIR $FOREVER_EXEC stop $APP_DIR/$NODE_APP
          RESULT=$?
          rm -f $PID_FILE;
        else
          # echo "Killing `cat $PID_FILE`"
          kill `cat $PID_FILE` 1>/dev/null 2>&1
          RESULT=$?
          rm -f $PID_FILE;
        fi
        
        if [ $RESULT -eq 0 ]
        then
          echo "Node stopped"
        else
          echo "error."
        fi
    fi
}

multiple_apps_start (){
    INDEX=0
    for APP in ${NODE_APPS[@]}; do
      NODE_ENV=${NODE_ENVS[$INDEX]}
      NODE_APP=${NODE_APPS[$INDEX]}
      PORT=${NODE_PORTS[$INDEX]}
      APP_DIR=${APP_DIRS[$INDEX]}
      PID_DIR=$APP_DIR/pid
      LOG_DIR=$APP_DIR/log
      CONFIG_DIR=$APP_DIR/config
      PID_FILE=$PID_DIR/app.pid
      LOG_FILE=$LOG_DIR/app.log
      
      start_app
      let "INDEX++"
    done
}

multiple_apps_stop (){
    INDEX=0
    for APP in ${NODE_APPS[@]}; do
      NODE_ENV=${NODE_ENVS[$INDEX]}
      NODE_APP=${NODE_APPS[$INDEX]}
      PORT=${NODE_PORTS[$INDEX]}
      APP_DIR=${APP_DIRS[$INDEX]}
      PID_DIR=$APP_DIR/pid
      LOG_DIR=$APP_DIR/log
      CONFIG_DIR=$APP_DIR/config
      PID_FILE=$PID_DIR/app.pid
      LOG_FILE=$LOG_DIR/app.log
      
      stop_app
      let "INDEX++"
    done
}


case "$1" in
    start)
        if [ "x$MULTIPLE_APPS" = "xyes" ]
        then
          multiple_apps_start
        else
          start_app
        fi
    ;;

    stop)
        if [ "x$MULTIPLE_APPS" = "xyes" ]
        then
          multiple_apps_stop
        else
          stop_app
        fi
        
    ;;

    restart)
        if [ "x$MULTIPLE_APPS" = "xyes" ]
        then
          multiple_apps_stop
          multiple_apps_start
        else
          stop_app
          start_app
        fi
    ;;

    status)
        if [ "x$MULTIPLE_APPS" != "xyes" ]
        then

          if [ -f $PID_FILE ]
          then
              PID=`cat $PID_FILE`
              if [ -z "`ps ef | awk '{print $1}' | grep "^$PID$"`" ]
              then
                  echo "Node app stopped but pid file exists"
              else
                  echo "Node app running with pid $PID"

              fi
          else
              echo "Node app stopped"
          fi

        fi
    ;;

    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
    ;;
esac

